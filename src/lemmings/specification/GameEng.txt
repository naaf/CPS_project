Service : GameEng
use : Level
types :

Observators :
	const level : [GameEng] -> [Level]
	const sizeColony :[GameEng] -> int
	const spawnSpeed : [GameEng] -> int
	tour : [GameEng] -> int
	obstacle : [GameEng] * int * int -> bool
		pre obstacle(G,i,j) require Level::caseExiste(level(G), i, j)
	gameOver : [GameEng] -> bool
	score : [GameEng] -> int
		pre score(G) require gameOver(G)
	nbSauves : [GameEng] -> int
	lemmings : [GameEng] -> set<int>
	lemmingExiste : [GameEng] * int -> bool
	getLemming : [GameEng] * int -> Lemming
		pre getLemming(G, n) require lemmingExiste(G,n)
																
Constructors : 
	init : Level * int * int -> [GameEng]
		pre : init(L,size,speed) require size > 0 ^ speed > 0 
Operators
	activeTour : [GameEng] -> GameEng
		pre activeTour(G) require ¬ gameOver(G)
	supprimeLemming : [GameEng] * int -> GameEng
		pre supprimeLemming(G, id) require lemmingExiste(G, id)
	creeLemming : [GameEng] * int * int * int -> GameEng 
		pre creeLemming(G, id, x, y) require card(lemmings(G)) < sizeColony(G)
		^ ¬lemmingExiste(G, id)
	saveLemming : [GameEng] * int -> GameEng
		pre saveLemming(G, id) require lemmingExiste(G, id)
	
Observations :
	[Invariant]
		card(lemmings(G)) <= sizeColony(G)
		0 <= nbSauves() < sizeColony()
		gameOver(G) min= (tour(G) * spawnSpeed(G) = sizeColony(G)) && (card(lemmings(G)) == 0 ) 
		score(G) min= nbSauves(G)/sizeColony(G) * 100
		obstacle(G,x,y) min= ¬(Level::nature(level(G), x,y) = EMPTY)
	[init]
		level(init(L, size, speed)) = L
		sizeColony(init(L, size, speed)) = size
		spawnSpeed(init(L, size, speed)) = speed
		gameOver(init(L, size, speed)) = false
		tour(init(L, size, speed)) = 0
		nbSauves(init(L, size, speed)) = 0
		lemmings(init(L, size, speed)) = {}
	
	[supprimeLemming]
		tour(supprimeLemming(G, id)) = tour(G)@pre
		nbSauves(supprimeLemming(G, id)) = nbSauves(G)@pre
		lemmings(supprimeLemming(G, id)) = lemmings(G)@pre /  id
		∀ n ∈  lemmings(G) / {num}, getLemming(supprimeLemming(G, num), n) = getLemming(G,n)
		
	[creeLemming]
		tour(creeLemming(G, id,x,y)) = tour(G)@pre
		nbSauves(supprimeLemming(G, id)) = nbSauves(G)@pre
		lemmings(creeLemming(G, id,x,y)) = lemmings(G)@pre ⋃ {id}
		getLemming(creeLemming(G, id,x,y), id) = Lemming::init(G,id,x,y)
		∀ n ∈ lemmings(G) && n != id
			getLemming(creeLemming(G,id,x,y), n) = getLemming(G, n)
		
	[saveLemming]
		tour(saveLemming(G, id)) = tour(G)@pre
		nbSauves(saveLemming(G, id)) = nbSauves(G)@pre +1
		lemmings(saveLemming(G, id)) = lemmings(G)@pre / id
		∀ n ∈  lemmings(G) / {num}, getLemming(saveLemming(G, num), n) = getLemming(G,n)
		
	[activeTour]
		tour(activeTour(G)) = tour(G)@pre + 1
		lemmings(activeTour(G)) = lemmings(G)
		∀ n ∈ lemmings(G)
			getLemming(activeTour(G),n) = getLemming(G,n)
		
		