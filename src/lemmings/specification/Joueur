Service : Joueur
use : GameEng
types : ClasseType{ TOMBEUR, MARCHEUR,GRIMPEUR,CREUSEUR }

Observators :
	const nbJetons : [Joueur] --> int
	gameEng : [Joueur] --> GameEng
	getJetons : [Joueur] * ClasseType --> int
	classeTypes : [Joueur] -> set<ClasseType, int>
	
Constructors :
 	init : GameEng * int --> Joueur
 		pre init(G,nbJtn) require nbJtn > 0 ^ G != NULL
 	
Operators:
	assignerClasse : [Joueur] * ClasseType * Lemming --> Joueur
		pre: assignerClasse(J, c, l) require getJetons(J, c) > 0
	reset : [Joueur] --> Joueur
	
Observations:
	[invariants]
		nbJetons > 0
		classeTypes != {}
	[init]
		gameEng(init(G, n)) = G
		nbJetons(init(G, n)) = n
		∀ ct ∈ classeTypes(); getJetons(init(G, n), ct) = n
		classeTypes(init(G, n)) = {<MARCHEUR,n>,<GRIMPEUR,n>,...}
		
	
	[assignerClasse]
		gameEng(assignerClasse(J, c, l)) = gameEng(J)
		getJetons(assignerClasse(J, c, l), c) = getJetons(J,c)@pre -1
		∀ c1,c2 ∈ classeTypes(); c1 != c2; getJetons(assignerClasse(J, c1, l), c2) = getJetons(J,c2)
	
	[reset]
		gameEng(reset(J)) = GameEng::init(gameEng().level(), gameEng().sizeColony(), gameEng().spawnSeep())
		nbJetons(reset(J)) = nbJetons(J)
		∀ ct ∈ classeTypes(); getJetons(reset(J), ct) = nbJetons(J)
		
