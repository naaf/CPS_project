Service : Lemming
use : GameEng
types : Direction{GAUCHE, DROITE}, ClasseType{TOMBEUR, MARCHEUR,GRIMPEUR,CREUSEUR}

Observators :
	const gameEng : [Lemming] -> GameEng
	x : [Lemming] -> int
	y : [lemming] -> int
	direction : [Lemming] -> Direction
	classeType : [Lemming]  -> ClasseType
	enChute : [Lemming] -> int
	
Constructors : 
	init : GamingEng * int * int -> [GameEng]
		pre : init(G, x, y) require 
		G != null
		^ Level::caseExiste(GameEng::level(G), x,y)
		^ Level::nature(GameEng::level(G), x, y) = EMPTY
		^ Level::nature(GameEng::level(G), x, y +1) = EMPTY
		

Operators
 	step : [Lemming] -> Lemming
 		pre: step(l) require ¬GameEng::gameOver(gameEng(L))
	setClasseLemming : [Lemming] * ClasseType -> Lemming
	changeDirection : [Lemming] -> Lemming
		
Observations :
	
	[Invariant]
		Level::nature(GameEng::level(gameEng(L)), x, y +1) = EMPTY
		Level::nature(GameEng::level(gameEng(L)), x, y) = EMPTY
	
	[init]
		x(init(G, i,j)) = i
		y(init(G, i,j)) = j
		gameEng(init(G, i,j)) = G
		classeType(init(G, i,j)) = MARCHEUR
		direction(init(G, i,j)) = DROITE
		enChute(init(G, i,j)) = 0
		
	[setClasseLemming]
		x(setType(L, T)) = x(L)@pre
		y(setType(L, T)) = y(L)@pre
		enChute(setType(L, T)) = 0
		direction(setType(L, T)) = direction(L)@pre
		type(setType(L, T)) = T
		
	[changeDirection]
		x(changeDirection(L)) = x(L)@pre
		y(changeDirection(L)) = y(L)@pre
		type(changeDirection(L)) = type(L)@pre
		if direction(G) = GAUCHE then
			direction(changeDirection(L)) = DROITE
		else 
			direction(changeDirection(L)) = GAUCHE
		
	[step]
		if classeType(L) = MARCHEUR then :
			enChute(step(L)) = enChute(L)@pre
			if obstacle(L, x(L), y(L)-1)  then :
				classeType(step(L)) = classeType(L)
				if obstacle(L, x(L)+1,y(L)+1) || ( obstacle(L, x(L)+1, y(L)) && obstacle(x(L)+1,y(L)+2) ) then :
					direction(step(L)) = direction(changeDirection(L))
					x(step(L)) = x(L)@pre
					y(step(L)) = y(L)@pre
				else 
					direction(step(L)) = direction(L)@pre
					x(step(L)) = x(L)@pre +1
					if obstacle(L, x(L)+1, y(L))  then :
						y(step(L)) = y(L)@pre +1
					else
						y(step(L)) = y(L)@pre
			else
				classeType(step(L)) = TOMBEUR
				
				
		else if classeType(L) = TOMBEUR then :
			x(step(L)) = x(L)@pre
			direction(step(L)) = direction(L)@pre
			if(obstacle(L, x(L), y(L)-1)) then :
				y(step(L)) = y(L)@pre 
				classeType(step(L)) = MARCHEUR
				if enChute(L) >= 8 then :
					L ∉ GameEng::lemmings(gameEng(L))
			else
				y(step(L)) = y(L)@pre -1
				classeType(step(L)) = classeType(L)@pre
				enChute(step(L)) = enChute(L)@pre +1
				
		else if classeType(L) = CREUSEUR then :
			x(step(L)) = x(L)@pre
			direction(step(L)) = direction(L)@pre
			if Level::nature(GameEng::level(gameEng(L)), x(L), y(L)-1) = DIRTY
				y(step(L)) = y(L)@pre +1
				classeType(step(L)) = classeType(L)@pre
			
			else if Level::nature(GameEng::level(gameEng(L)), x(L), y(L)-1) = METAL then :
				y(step(L)) = y(L)@pre
				classeType(step(L)) = MARCHEUR
			else
				y(step(L)) = y(L)@pre 
				classeType(step(L)) = TOMBEUR
	
		else if (classeType(L) = GRIMPEUR) then :
			
			if obstacle(L,x(L)+1,y(L)) && obstacle(L,x(L)+1,y(L)+1) &&
				¬obstacle(L, x(L), y(L)+2) then :
				direction(step(L)) = direction(L)@pre
				classeType(step(L)) = classeType(L)@pre
				y(step(L)) = y(L)@pre +1
				x(step(L)) = x(L)@pre
			else 
				if obstacle(L,x(L),y(L) + 2) then :
					classeType(step(L)) = TOMBEUR
					direction(step(L)) = direction(L)@pre
					y(step(L)) = y(L)@pre
				else if obstacle(L,x(L)+1,y(L)) && ¬obstacle(L,x(L)+1,y(L)+1)
					classeType(step(L)) = MARCHEUR
					y(step(L)) = y(L)@pre +1
					x(step(L)) = x(L)@pre +1
				
				
				
				
				